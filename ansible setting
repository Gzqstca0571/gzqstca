
========================================================================================
ansible可以让我们实现：
自动化部署APP
自动化管理配置项
自动化的持续交付
自动化的（AWS）云服务管理

ansible优点
仅需要ssh和Python即可使用
无需客户端
ansible功能强大，模块丰富
上手容易门槛低
基于python开发，做二次开发更容易
使用公司比较多，社区活跃

ansible缺点
对于几千台，上万台机器的操作，还不清楚性能，效率情况如何，需要进一步了解

nasible特性
模块化设计，调用特定的模块来完成特定任务

基于pythone语言实现
paramiko
PyYAML(半结构化语言)
jinja2

其模块支持JSON等标准输出格式，可采用任何编程语言重写

ansible特性
部署简单
主从模式工作
支持自定义模块
支持playbook
易于使用
支持多层部署
支持异构IT环境

ansible工作过程

读取配置文件===>
抓取全量机器&分组列表===>
使用hos-pattern过滤机器列表===>
根据参数确定执行模块和配置===>
Runner执行返回===>
输出，结束

========================================================================================
软件依赖关系
对管理主机
-要求Python 2.6 或 Python2.7
-ansible使用了以下模块，都需要安装
-paramiko
-PyYAML
-jinja2
-httplib2
-six
========================================================================================
ansible
配置解析所有节点主机（包括本身）
vim /etc/hosts

在ansible主机安装制做ansible的yum源并安装
制做yum源
cp /var/myfile/ansible/soft/* ./
createrpo .


ansible管理机器上
vim /etc/yum.repos.d/ansible.repo
[ansible]
name=ansible
baseurl=ftp://192.168.1.254/ansible
enabled=1
gpgcheck=0
yum -y install ansible
ansible --version

如果托管节点上需要安装python2.5以上版本
如果托管节点上开启了SElinux，需要安装libselinux-python
ansible默认通过SSH协议管理机器
被管理主机要开启ssh服务，允许ansible主机登录
在托管节点上也需要安装python2.5或以上的版本
托管上开启了SElinux需要安装libselinux-python
*********************************************************
ansible也可以基于源码运行
源码安装 
pip	需要配置扩展软件包源extras
git
	yum -y install epel-release
	yum -y install git python2-pip
pip	安装 依赖模块
	pip install paramiko PyYAML jinja2 httplib2 six

ansible源码下载
git clone git://github.com/ansible/ansible.git
yum -y install python-setuptools python-devel
python setup.py build
python setup.py install

pip方式安装
pip install ansible
=========================================================
ansible rpm包可以在镜像文件中查找到
进入到centos官网
挑选everything其中一个镜像，复制链接地址
例:http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-1804.iso
去除掉镜像文件名称
http://mirrors.163.com/centos/7/isos/x86_64/
../
查找到一个名称为extras	扩展安装源的文件夹
extras/
x86_64/
Packages/
ansible-2.4.2.0-2.el7.noarch.rpm


http://mirrors.aliyun.com/centos/7/extras/x86_64/Packages/

下载ansible-*.rpm

getenforce

sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config
setenforce 0
systemctl stop firewalld.service
systemctl enable firewalld.service

for i in 192.168.1.{1..10}
do 
ssh $i sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config
ssh $i setenfoce 0
ssh $i systemctl stop firewalld.service
ssh $i systemctl enable firewalld.service
done
=========================================================


练习环境

启用6台虚拟机
禁用selinux 和firewalld
给主机命名，编辑/etc/hosts
1台作用管理节点，其它为托管主机
配置本地yum扩展源
在管理节点安装ansible

=========================================================

对管理主机进行定义与分组
ansible配置文件查找顺序
首先检测ansible_config变量定义的配置文件
其次检查当前目录下的./ansible.cfg文件
再次检查当前用户家目录下~/ansible.cfg文件
最后检查/etc/ansible/ansible.cfg文件

/etc/ansible/ansible.cfg默认配置文件路径

cd /etc/ansible/
ls
ansible.cfg hosts roles

ansible.cfg配置文件
inventory是定义托管主机地址配置文件
首先编辑/etc/ansible/hosts文件，写入一些远程被管理主机的地址
格式
#表示注释
[组名称]
主机名称或ip地址，登录用户名，密码，端口等信息
测试
ansible 组名称 --list-hosts

=================================================================
grep -Pv "^(#|$)" ansible.cfg	显示ansible.cfg文件中，取反对于开头是(#或者是到结尾为空)


vim ansible.cfg
inventory     = /etc/ansible/hosts	该行注释去掉,指定ansible操作的分组配置文件

vim hosts

插入
例：
[web]
web1	
web2	或者		web[1:2]  也可以写域名或ip地址

[web:vars]		对一个组进行变量的赋值
ansible_ssh_user="root"	
ansible_ssh_pass="abc123"
ansible_ssh_port="12345"

[db]
db1
db2
或者		db[1:2]	ansible_ssh_user="root"	ansible_ssh_pass="abc123"


[other]
cache	 ansible_ssh_user="root"	ansible_ssh_pass="abc123"

[app:children]
web
db

====================================================================
测试
ansible --list-hosts web
ansible --list-hosts db
ansible --list-hosts other
ansible --list-hosts all
====================================================================
测试前先连一下目标主机，否则会报错
ansible cache -m ping		ansible对主机cache采用ping模块进行ssh连接

rm -rf /root/ansible/cp/*	清除inventory下的目标主机缓存信息，也会造成报错信息

解决方法：
vim /etc/ansible/ansible.cfg
61 host_key_checking = False	注释掉#号，并把值改成False。检查key值为否，可以避免连接报错

============================================================================================
创建一个自定义的ansible配置文件
例：
mkdir /ansible/gzqstca/
cd /ansible/gzqstca/
touch ansible.cfg

vim ansible.cfg
[defaults]
inventory 	= /ansible/gzqstca/hosts
host_key_checking = False

vim /ansible/gzqstca/hosts
[app1]
web1
db1

[app2]
web2
db2

[app:children]
app1
app2

[other]
192.168.1.16

[root@ansible gzqstca]# ansible app1 --list-host
[root@ansible gzqstca]# ansible app2 --list-host	

============================================================================================
在脚本切换ansible应用场景(设置全局变量，unset ANSIBLE_CONFIG取消定义全局变量)
ANSIBLE_CONFIG=/var/gzqstca/ansible.cfg
export ANSIBLE_CONFIG

or
ANSIBLE_CONFIG=/etc/ansible/ansible.cfg
export ANSIBLE_CONFIG

============================================================================================
vim aabb.py
#!/usr/bin/python
import json
hostlist = {}
hostlist["web"] = ["web1","web2"]
hostlist["db"] = {
	"hosts" : ["db1","db2"],
	"vars" : {
		"ansible_ssh_user":"root","ansible_ssh_pass":"123456"
		}
}
hostlist["other"] = ["cache"]
print(json.dumps(hostlist))

chmod 755 aabb.py
./aabb.py
把输出内容复制
vim aabb.sh
#!/bin/bash
cat <<'EOF'
{
  "web": ["web1","web2"],
"other": ["cache"],
   "db": {
	"hosts": ["db1","db2"],
	 "vars": {
		"ansible_ssh_user": "root",
		"ansible_ssh_pass": "123456"
		  }
         }
 }
EOF

chmod 755 aabb.sh
======================================================================================

vim ansible.cfg
[defaults]
inventory	= aabb.py(or aabb.sh)
host_key_checking = False

=======================================================================================
ansible <host-pattren> [options]
host-pattren	主机或定义的分组
-M 指定模块路径
-m 使用模块
-a 模块参数
-i inventory文件路径
-k 使用交互登录密码
-e 定义变量
-v 详细信息	-vvvv 开启debug模式

ansible all --list-hosts
ansible all -m ping
ansible all -m command -a 'id' -k

ansible all -m 'command' -a 'uptime'
ansible all -m 'command' -a 'free -m'
ansible all -m 'command' -a 'df -h'

=======================================================================================

ssh-keygen -t(类型) rsa -b（长度） 2048 -N（密码） '' -f（文件名）  .id_rsa

ansible all -m authorized_key -a "user=root exclusive=true manage_dir=true key='$(</root/.ssh/id_rsa.pub)'" -k
ansible all -m authorized_key -a "user=root exclusive=true manage_dir=true key='`cat /root/.ssh/id_rsa.pub`'" -k
用户名 root
exclusive 采取强制覆盖方法布置公钥
manage_dir

cat /root/.ssh/id_rsa.pub
把内容替换上面的key值

========================================================================================
export LANG=zh_CN.UTF-8 无效
ansible-doc	查看帮助
ansible-doc-l 	列出所有模块
ansible-doc 模块名	查看该模块的帮助信息
例：
ansible-doc ping	

========================================================================================
ansible推荐使用功能强大的shell模块
例：
ansible cache -m shell -a 'uptime'

vim 1122.sh
#!/bin/bash
id zhang3
if [ $? != 0 ];then
	useradd -g 100 li4
	echo 123456|passwd --stdin li4
	chage -d 0 li4
fi

chmod +x 1122.sh

ansible web -m script(脚本) -a './1122.sh'

copy模块	例：
ansible all -m copy -a 'src=/etc/resolv.conf dest=/etc/resolv.conf'
-backup yes|no(备份目标主机原文件)
-force 	yes|no
ansible all -m shell -a 'chdir=/tmp touch file1'


ansible db -m lineinfile -a 'path=/etc/sysconfig/network-scripts/ifcfg-eth0 regexp="^IPV6INIT=" line="IPV6INIT=\"yes\""'

ansible db -m replace -a 'path=/etc/sysconfig/network-scripts/ifcfg-eth0 regexp="^(IPV6INIT=).*" replace="\1\"no\""'

sed 's#^(IPV6INIT=).*#\\1"no"#' /etc/sysconfig/network-scripts/ifcfg-eth0

安装yum模块应用
ansible all -m yum -a 'name="lftp" state=removed'
ansible all -m yum -a 'name="vsftpd" state=install'


管理服务模块

ansible all -m service -a 'name=chronyd enabled="yes" state="started"'
ansible all -m service -a 'name=chronyd enabled="no" state="stopped"'
